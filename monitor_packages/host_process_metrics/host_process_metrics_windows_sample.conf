# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "60s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 10000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "2s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "5s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  ##debug = true
  ## Log only error level messages.
  ##quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  ##logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  ##logfile ="C:\Users\Administrator\AppData\Local\telegraf.log"

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  logfile_rotation_interval = "1d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  logfile_rotation_max_archives = 1

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


# host metrics

[[inputs.cpu]]
  name_prefix = "host_"
  ## Whether to report per-cpu stats or not
  percpu = false
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

[[inputs.disk]]
  name_prefix = "host_"

[[inputs.win_perf_counters.object]]
  name_prefix = "host_"
  ObjectName = "PhysicalDisk"
  Instances = ["*"]
  Counters = [
    "Disk Read Bytes/sec",
    "Disk Write Bytes/sec",
    "Disk Reads/sec",
    "Disk Writes/sec"
  ]
  Measurement = "win_diskio"
  # Other Counters
  # "Current Disk Queue Length",
  # "% Disk Time",
  # "% Disk Read Time",
  # "% Disk Write Time",

[[inputs.win_perf_counters.object]]
  # Example query where the Instance portion must be removed to get data back,
  # such as from the Paging File object.
  name_prefix = "host_"
  ObjectName = "Paging File"
  Counters = [
    "% Usage",
  ]
  Instances = ["_Total"]
  Measurement = "win_swap"

[[inputs.mem]]
  name_prefix = "host_"
  fielddrop=["vmalloc*","write_back*", "realtime_priority", "high_free", "high_total", "huge_page*", "low_free", "low_total","sunreclaim","sreclaimable","commit*"]
[[inputs.net]]
  name_prefix = "host_"
  fielddrop=["ip_*","icmp*","tcp*","udp*"]
[[inputs.netstat]]
  name_prefix = "host_"
  fielddrop=["tcp_fin_wait1","tcp_fin_wait2","tcp_last_ack","udp_socket","tcp_closing"]
[[inputs.system]]
  name_prefix = "host_"
  fielddrop=["n_cpus","n_users","uptime"]


# process metrics

[[inputs.procstat]]
  pattern= "."
  pid_finder = "native"
  pid_tag=false
  fielddrop=["rlimit*","nice_priority", "realtime_priority", "procstat_lookup"]
# For filtering executable name containing nginx
# exe = "%nginx%"

# For filtering commandline containing config
# pattern = "%config%"

## For multiple processes
# you can have two plugins
# [[inputs.procstat]]
#   exe = "%nginx%"

# [[inputs.procstat]]
#   exe = "%tomcat%"

# [[inputs.win_perf_counters.object]]
#   ObjectName = "Process"
#   Counters = ["% Processor Time","Handle Count","Private Bytes","Thread Count","Virtual Bytes","Working Set"]
#   Instances = ["*"]
#   Measurement = "win_proc"
#   IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

# processors

[[processors.rename]]
  namepass = ["procstat*","processes*","host*", "win_swap", "win_diskio"]
  [[processors.rename.replace]]
    tag = "host"
    dest = "host.name"
  [[processors.rename.replace]]
    tag = "process_name"
    dest = "process.executable.name"

# sumologic

[[outputs.sumologic]]
  url = "CHANGE_ME"
  data_format = "carbon2"
  namepass = ["procstat*","processes*","host*", "win_swap", "win_diskio"]
